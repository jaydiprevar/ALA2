import tkinter as tk
from tkinter import ttk, scrolledtext
import random
import time
from datetime import datetime
from threading import Thread

class MalwareSimulator:
    def __init__(self, root):
        self.root = root
        self.root.title("Malware Behavior Simulator")
        self.root.geometry("1200x800")
        self.root.configure(bg="#1e3c72")
        
        # Grid settings
        self.GRID_SIZE = 64
        self.nodes = []
        self.node_buttons = []
        
        # Simulation data
        self.simulation_data = {
            'virus': {'activated': False, 'infections': 0, 'spread_time': []},
            'worm': {'activated': False, 'infections': 0, 'spread_time': []},
            'trojan': {'activated': False, 'infections': 0, 'spread_time': []}
        }
        
        # Running threads
        self.running_simulations = []
        
        self.setup_ui()
        self.initialize_grid()
        
    def setup_ui(self):
        # Header
        header = tk.Frame(self.root, bg="#2a5298", padx=20, pady=15)
        header.pack(fill=tk.X, padx=10, pady=10)
        
        title = tk.Label(header, text="🛡️ Malware Behavior Simulator", 
                        font=("Arial", 24, "bold"), bg="#2a5298", fg="white")
        title.pack()
        
        subtitle = tk.Label(header, text="Educational Tool for Understanding Cybersecurity Threats",
                           font=("Arial", 12), bg="#2a5298", fg="#ffeb3b")
        subtitle.pack()
        
        # Main container
        main_container = tk.Frame(self.root, bg="#1e3c72")
        main_container.pack(fill=tk.BOTH, expand=True, padx=10)
        
        # Left panel - Controls
        left_panel = tk.Frame(main_container, bg="#1e3c72", width=300)
        left_panel.pack(side=tk.LEFT, fill=tk.Y, padx=(0, 10))
        
        # Control buttons
        self.create_control_card(left_panel, "🦠 Virus Simulation", 
                                "Requires host file to spread", "#f44336", self.simulate_virus)
        
        self.create_control_card(left_panel, "🐛 Worm Simulation", 
                                "Self-replicating malware", "#ff9800", self.simulate_worm)
        
        self.create_control_card(left_panel, "🎭 Trojan Simulation", 
                                "Disguised as legitimate", "#9c27b0", self.simulate_trojan)
        
        # Reset button
        reset_btn = tk.Button(left_panel, text="Reset Simulation", font=("Arial", 12, "bold"),
                             bg="#4caf50", fg="white", command=self.reset_simulation,
                             padx=20, pady=10, relief=tk.RAISED, bd=3)
        reset_btn.pack(pady=20, fill=tk.X)
        
        # Right panel - Grid and logs
        right_panel = tk.Frame(main_container, bg="#1e3c72")
        right_panel.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        # Grid frame
        grid_frame = tk.Frame(right_panel, bg="#0d1b2a", relief=tk.SUNKEN, bd=2)
        grid_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 10))
        
        grid_title = tk.Label(grid_frame, text="Network Simulation Grid", 
                             font=("Arial", 14, "bold"), bg="#0d1b2a", fg="white")
        grid_title.pack(pady=10)
        
        # Legend
        legend_frame = tk.Frame(grid_frame, bg="#0d1b2a")
        legend_frame.pack()
        
        legends = [
            ("Healthy", "#4caf50"),
            ("Virus", "#f44336"),
            ("Worm", "#ff9800"),
            ("Trojan", "#9c27b0")
        ]
        
        for text, color in legends:
            lf = tk.Frame(legend_frame, bg="#0d1b2a")
            lf.pack(side=tk.LEFT, padx=10, pady=5)
            
            color_box = tk.Label(lf, bg=color, width=3, height=1, relief=tk.RAISED, bd=2)
            color_box.pack(side=tk.LEFT, padx=5)
            
            label = tk.Label(lf, text=text, font=("Arial", 9), bg="#0d1b2a", fg="white")
            label.pack(side=tk.LEFT)
        
        # Network grid
        self.grid_container = tk.Frame(grid_frame, bg="#0d1b2a")
        self.grid_container.pack(padx=20, pady=10)
        
        # Stats frame
        stats_frame = tk.Frame(grid_frame, bg="#0d1b2a")
        stats_frame.pack(pady=10)
        
        self.healthy_label = self.create_stat_box(stats_frame, "Healthy Nodes", "64")
        self.infected_label = self.create_stat_box(stats_frame, "Infected Nodes", "0")
        self.rate_label = self.create_stat_box(stats_frame, "Infection Rate", "0%")
        
        # Log area
        log_frame = tk.Frame(right_panel, bg="#0d1b2a", relief=tk.SUNKEN, bd=2)
        log_frame.pack(fill=tk.BOTH, pady=(0, 10))
        
        log_title = tk.Label(log_frame, text="Activity Log", 
                            font=("Arial", 12, "bold"), bg="#0d1b2a", fg="white")
        log_title.pack(pady=5)
        
        self.log_text = scrolledtext.ScrolledText(log_frame, height=8, width=80,
                                                   bg="#1a1a1a", fg="#00ff00",
                                                   font=("Courier", 9))
        self.log_text.pack(padx=10, pady=5, fill=tk.BOTH)
        
        # Report button
        report_btn = tk.Button(right_panel, text="Generate Detailed Report", 
                              font=("Arial", 11, "bold"), bg="#4caf50", fg="white",
                              command=self.generate_report, padx=20, pady=8)
        report_btn.pack()
        
    def create_control_card(self, parent, title, desc, color, command):
        card = tk.Frame(parent, bg="#2a5298", relief=tk.RAISED, bd=2)
        card.pack(pady=10, fill=tk.X)
        
        title_label = tk.Label(card, text=title, font=("Arial", 11, "bold"),
                              bg="#2a5298", fg="#ffeb3b")
        title_label.pack(pady=(10, 5))
        
        desc_label = tk.Label(card, text=desc, font=("Arial", 9),
                             bg="#2a5298", fg="white", wraplength=250)
        desc_label.pack(pady=5)
        
        btn = tk.Button(card, text="Simulate", font=("Arial", 10, "bold"),
                       bg=color, fg="white", command=command, padx=20, pady=8)
        btn.pack(pady=10)
        
    def create_stat_box(self, parent, label, value):
        box = tk.Frame(parent, bg="#1a3a52", relief=tk.RAISED, bd=2)
        box.pack(side=tk.LEFT, padx=10)
        
        label_widget = tk.Label(box, text=label, font=("Arial", 9),
                               bg="#1a3a52", fg="white")
        label_widget.pack(pady=(5, 2), padx=15)
        
        value_widget = tk.Label(box, text=value, font=("Arial", 18, "bold"),
                               bg="#1a3a52", fg="#ffeb3b")
        value_widget.pack(pady=(2, 5), padx=15)
        
        return value_widget
        
    def initialize_grid(self):
        # Clear existing grid
        for widget in self.grid_container.winfo_children():
            widget.destroy()
        
        self.node_buttons = []
        self.nodes = []
        
        for i in range(8):
            row_frame = tk.Frame(self.grid_container, bg="#0d1b2a")
            row_frame.pack()
            
            for j in range(8):
                index = i * 8 + j
                btn = tk.Button(row_frame, text="💻", font=("Arial", 12),
                               width=3, height=1, bg="#4caf50", fg="white",
                               relief=tk.RAISED, bd=2)
                btn.pack(side=tk.LEFT, padx=2, pady=2)
                
                self.node_buttons.append(btn)
                self.nodes.append({'status': 'healthy', 'index': index})
        
        self.update_stats()
        self.add_log("System initialized", "system")
        
    def update_stats(self):
        healthy = sum(1 for n in self.nodes if n['status'] == 'healthy')
        infected = self.GRID_SIZE - healthy
        rate = (infected / self.GRID_SIZE) * 100
        
        self.healthy_label.config(text=str(healthy))
        self.infected_label.config(text=str(infected))
        self.rate_label.config(text=f"{rate:.1f}%")
        
    def add_log(self, message, log_type):
        timestamp = datetime.now().strftime("%H:%M:%S")
        color_map = {
            'virus': '#f44336',
            'worm': '#ff9800', 
            'trojan': '#9c27b0',
            'system': '#4caf50'
        }
        
        self.log_text.insert(tk.END, f"[{timestamp}] {message}\n")
        self.log_text.see(tk.END)
        
    def infect_node(self, index, status, icon):
        self.nodes[index]['status'] = status
        color_map = {
            'infected': '#f44336',
            'worm-infected': '#ff9800',
            'trojan': '#9c27b0'
        }
        self.node_buttons[index].config(text=icon, bg=color_map.get(status, '#4caf50'))
        self.update_stats()
        
    def get_neighbors(self, index):
        neighbors = []
        row = index // 8
        col = index % 8
        
        if col > 0: neighbors.append(index - 1)
        if col < 7: neighbors.append(index + 1)
        if row > 0: neighbors.append(index - 8)
        if row < 7: neighbors.append(index + 8)
        
        return neighbors
        
    def simulate_virus(self):
        if self.simulation_data['virus']['activated']:
            self.add_log("Virus simulation already running!", "system")
            return
            
        self.simulation_data['virus']['activated'] = True
        
        def virus_thread():
            start_node = random.randint(0, self.GRID_SIZE - 1)
            self.add_log("🦠 VIRUS DETECTED: Requires host file to execute", "virus")
            self.add_log(f"Initial infection at Node {start_node}", "virus")
            
            self.infect_node(start_node, 'infected', '🦠')
            self.simulation_data['virus']['infections'] += 1
            
            for _ in range(15):
                if not self.simulation_data['virus']['activated']:
                    break
                    
                infected_nodes = [i for i, n in enumerate(self.nodes) if n['status'] == 'infected']
                
                if not infected_nodes:
                    break
                    
                for node_idx in infected_nodes:
                    neighbors = self.get_neighbors(node_idx)
                    for n_idx in neighbors:
                        if self.nodes[n_idx]['status'] == 'healthy' and random.random() > 0.7:
                            self.infect_node(n_idx, 'infected', '🦠')
                            self.simulation_data['virus']['infections'] += 1
                            self.add_log(f"Virus spread to Node {n_idx}", "virus")
                
                time.sleep(1)
            
            self.add_log("Virus simulation complete", "virus")
            
        thread = Thread(target=virus_thread, daemon=True)
        thread.start()
        
    def simulate_worm(self):
        if self.simulation_data['worm']['activated']:
            self.add_log("Worm simulation already running!", "system")
            return
            
        self.simulation_data['worm']['activated'] = True
        
        def worm_thread():
            start_node = random.randint(0, self.GRID_SIZE - 1)
            self.add_log("🐛 WORM DETECTED: Self-replicating malware", "worm")
            self.add_log(f"Worm entry point: Node {start_node}", "worm")
            
            self.infect_node(start_node, 'worm-infected', '🐛')
            self.simulation_data['worm']['infections'] += 1
            
            while self.simulation_data['worm']['activated']:
                worm_nodes = [i for i, n in enumerate(self.nodes) if n['status'] == 'worm-infected']
                
                if len(worm_nodes) >= self.GRID_SIZE * 0.8:
                    self.add_log("Worm infected majority of network", "worm")
                    break
                    
                for node_idx in worm_nodes:
                    neighbors = self.get_neighbors(node_idx)
                    for n_idx in neighbors:
                        if self.nodes[n_idx]['status'] == 'healthy' and random.random() > 0.5:
                            self.infect_node(n_idx, 'worm-infected', '🐛')
                            self.simulation_data['worm']['infections'] += 1
                            self.add_log(f"Worm replicated to Node {n_idx}", "worm")
                
                time.sleep(0.8)
                
        thread = Thread(target=worm_thread, daemon=True)
        thread.start()
        
    def simulate_trojan(self):
        if self.simulation_data['trojan']['activated']:
            self.add_log("Trojan simulation already running!", "system")
            return
            
        self.simulation_data['trojan']['activated'] = True
        
        def trojan_thread():
            target_nodes = random.sample(range(self.GRID_SIZE), 5)
            
            self.add_log("🎭 TROJAN DETECTED: Disguised as legitimate", "trojan")
            
            for i, node_idx in enumerate(target_nodes):
                time.sleep(2)
                self.infect_node(node_idx, 'trojan', '🎭')
                self.simulation_data['trojan']['infections'] += 1
                self.add_log(f"Trojan activated on Node {node_idx}", "trojan")
            
            time.sleep(2)
            self.add_log("Trojan payload executed - Backdoor opened", "trojan")
            
        thread = Thread(target=trojan_thread, daemon=True)
        thread.start()
        
    def reset_simulation(self):
        self.simulation_data = {
            'virus': {'activated': False, 'infections': 0, 'spread_time': []},
            'worm': {'activated': False, 'infections': 0, 'spread_time': []},
            'trojan': {'activated': False, 'infections': 0, 'spread_time': []}
        }
        
        self.initialize_grid()
        self.log_text.delete(1.0, tk.END)
        self.add_log("System reset - All threats neutralized", "system")
        
    def generate_report(self):
        report_window = tk.Toplevel(self.root)
        report_window.title("Malware Analysis Report")
        report_window.geometry("800x600")
        report_window.configure(bg="white")
        
        report_text = scrolledtext.ScrolledText(report_window, wrap=tk.WORD,
                                                font=("Arial", 10), bg="white")
        report_text.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
        
        report = f"""
📊 MALWARE ANALYSIS REPORT
{'='*60}

EXECUTIVE SUMMARY
This report analyzes the behavior and impact of three major malware types.

1. VIRUS ANALYSIS
   • Infections: {self.simulation_data['virus']['infections']} nodes
   • Propagation: Requires host file attachment
   • Spread Pattern: User-dependent execution
   • Impact: Moderate to high
   • Prevention: Avoid unknown files, use antivirus

2. WORM ANALYSIS
   • Infections: {self.simulation_data['worm']['infections']} nodes
   • Propagation: Self-replicating via network
   • Spread Pattern: Autonomous and rapid
   • Impact: High to critical
   • Prevention: Patch systems, use firewalls

3. TROJAN ANALYSIS
   • Infections: {self.simulation_data['trojan']['infections']} nodes
   • Propagation: Disguised as legitimate software
   • Spread Pattern: Social engineering-based
   • Impact: Critical - data theft, backdoors
   • Prevention: Download from trusted sources only

KEY DIFFERENCES
• Replication: Viruses need hosts, Worms self-replicate, Trojans don't replicate
• User Interaction: Viruses require execution, Worms are autonomous
• Visibility: Trojans remain hidden, others are noticeable

DEFENSE STRATEGIES
✓ Layered Security: Multiple security controls
✓ Regular Updates: Keep systems patched
✓ User Training: Educate about threats
✓ Network Segmentation: Isolate critical systems
✓ Backup Systems: Regular data backups
✓ Monitoring: Continuous behavior analysis

CONCLUSION
Understanding malware behavior is crucial for cybersecurity. Each threat
requires different defensive approaches for effective protection.
"""
        
        report_text.insert(1.0, report)
        report_text.config(state=tk.DISABLED)
        
        self.add_log("Detailed analysis report generated", "system")


if __name__ == "__main__":
    root = tk.Tk()
    app = MalwareSimulator(root)
    root.mainloop()